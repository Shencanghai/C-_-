/*
	1.提前声明函数 + 定义函数的语法：
		返回值类型 函数名(形参列表);
		返回值类型 函数名(形参列表)
		{
			函数体;
			return表达式;
		}
	
		补：1.提前声明函数的好处：提前告诉编译器函数的存在以及如何调用函数，避免因为将函数定义写在main函
			数的后面而出现调用函数出错的情况。
			2.函数的常见样式：无参无返、有参无返、无参有返、有参有返

	2.函数分文件编写的步骤：
		整个流程至少涉及到3个文件 - 头文件、库文件(定义函数的源文件)、主文件(含有main函数的源文件)
			1. 创建后缀名为.h的头文件；
			2. 创建后缀名为.cpp的源文件；
			3. 在头文件中写函数的声明；
			4. 在库文件中写函数的定义，也需要包含头文件；
			5. 在含有main函数的源文件中包含头文件后，即可使用库文件中定义好的函数。

	3.函数的提高
		1. 形参是可以具有默认值的，这样可以减少实参传入的数量，在没有参数传入时就用定义好的默认值。
		   eg: int func(int a, int b = 20, int c = 30)
			   {
					return a + b + c;
			    } 
				传参时： func(10) -> 结果为60
						 func(10，30) -> 结果为70
		   
		   注意事项：①.如果存在函数声明，那么只能在函数声明和函数实现中的一处定义默认参数，否则会重定义默认参数。
					    eg:	int func(int a = 10, int b = 10) // 函数声明
							int func(int a, int b)			 // 函数实现，其中a、b不能重定义默认参数了。
							 {
								return a + b ;
							  }
					 ②.如果某个形参已经有了默认参数，那么后面的所有形参都需要有默认参数。
		
		2. 形参中可以有占位参数，即只有数据类型没有变量名，调用函数时必须填补该参数，但不必提供实际的参数值。
		   占位参数的意义：主要为了在函数定义时指定形参的个数和顺序，以便在函数调用时按照正确的顺序传递参数。
	
		3. 函数重载：保证函数名可以重复，提高程序的复用性。
		   
		   函数重载成功的条件：①.在同一个作用域下
						       ②.形参类型不同或个数不同或顺序不同。

	案例：
		1. 两个整数求和，返回值是求和结果。
		2. 函数分文件编写的案例 - 实现两个整数交换的函数

	学习记录：
		1. 如果函数不需要返回值，则返回值类型声明为void 。
		2. 当调用函数将实参传给形参并执行该函数后，实参并不会发生改变(因为实参的内存并没有受到任何影响)。
*/
#include <iostream>
using namespace std;
#include "swap.h"
// 1. 两个整数求和，返回值是求和结果。
int SUM(int num1, int num2)
{
	int sum = num1 + num2;
	return sum;
}

int main()
{
	cout << SUM(51, 99) << endl;
	
	// 在含有main函数的源文件中包含头文件后，即可使用该函数。
	int c = 50;
	int d = 60;
	swap(c, d);

	system("pause");
	return 0;
}