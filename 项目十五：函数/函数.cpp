/*
	提前声明函数 + 定义函数的语法：
		返回值类型 函数名(形参列表);
		返回值类型 函数名(形参列表)
		{
			函数体;
			return表达式;
		}
	
	提前声明函数的好处：提前告诉编译器函数的存在以及如何调用函数，避免因为将函数定义写在main函
						数的后面而出现调用函数出错的情况。
	函数的常见样式：无参无返、有参无返、无参有返、有参有返

	函数分文件编写的步骤：
	    整个流程至少涉及到3个文件 - 头文件、定义函数的源文件(库文件)、含有main函数的源文件
		1. 创建后缀名为.h的头文件；
		2. 创建后缀名为.cpp的源文件；
		3. 在头文件中写函数的声明；
		4. 在库文件中写函数的定义，也需要包含头文件；
		5. 在含有main函数的源文件中包含头文件后，即可使用库文件中定义好的函数。

	案例：
	1. 两个整数求和，返回值是求和结果。
	2. 函数分文件编写的案例 - 实现两个整数交换的函数

	学习记录：
	1. 如果函数不需要返回值，则返回值类型声明为void 。
	2. 当调用函数将实参传给形参并执行该函数后，实参并不会发生改变(因为实参的内存并没有受到任何影响)。
*/
#include <iostream>
using namespace std;
#include "swap.h"
// 1. 两个整数求和，返回值是求和结果。
int SUM(int num1, int num2)
{
	int sum = num1 + num2;
	return sum;
}

int main()
{
	cout << SUM(51, 99) << endl;
	
	// 在含有main函数的源文件中包含头文件后，即可使用该函数。
	int c = 50;
	int d = 60;
	swap(c, d);

	system("pause");
	return 0;
}