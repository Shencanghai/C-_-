/*
	C++程序在执行时，将内存大方向划分为四个区域。
		・代码区(程序运行前就存在)：所有的代码都存放在代码区，由操作系统进行管理。
		・全局区(程序运行前就存在)：全局变量、静态变量、全局常量、字符串常量。
		・栈区(程序运行后)：		局部变量、局部常量、函数的参数值；该区域由编译器自动分配释放。
		・堆区(程序运行后)：		需要由程序员分配与释放，若程序员不释放，程序结束时由操作系统回收。

		内存四区的意义：赋予数据不同的生命周期，提高编程的灵活性。

		补充知识：
			局部变量：写在特定代码块(如函数、循环、条件判断)中的变量都是局部变量。- 栈区
					  局部变量的生命周期仅限于其所在的代码块，当执行离开该代码块时，局部变量的内存空间会被释放，并
					  且无法再访问该变量。

			全局变量：没有写在函数体中的变量都是全局变量。        - 全局区

			静态变量：有关键字 static 修饰的变量都是静态变量。    - 全局区

			常    量：
					  字符串常量                                  - 全局区
					  局部常量：const 修饰的局部变量就是局部常量。- 栈区
					  全局常量：const 修饰的全局变量就是全局常量。- 全局区

	如何提高局部变量的生命周期：利用关键字 static 将局部变量声明成静态变量，这样就将变量存到了全局区，提高了生命周期。

	堆区操作的知识点
		1.在C++中主要通过关键字 new 在堆区开辟内存。
			创建变量的语法：int*  p  = new int(100);
			创建数组的语法：int* arr = new int[数组长度];  // 开辟数组用中括号

			注意点：new 开辟内存时只需要声明开辟空间的大小和保存的数据类型。
					new 返回值是分配内存块的首地址，因此要用相同类型的指针来接收地址。

		2.在C++中主要通过关键字 delete 在堆区释放内存。
			释放变量的语法：delete   变量的指针p;
			释放数组的语法：delete[] 数组的指针arr;

*/
#include <iostream>
using namespace std;

int main()
{

	system("pause");
	return 0;
}