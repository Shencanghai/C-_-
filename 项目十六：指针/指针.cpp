/*
	意义：
		想要取得某块内存中的值，除了可以通过这块内存的名称(变量)来取得，还可以通过这块内存的地
	址来取得。而指针就是用来记录这块内存的地址，因此指针实际上也是一个变量。
		
	指针保存的只是这块内存的地址，如何通过指针求解出该地址里的数据：*p - 解指针 。
	指针占用的内存大小：sizeof(数据类型*) 或者 sizeof(指针名)。事实上32位系统(x86)中指针占用4个
						字节，64位系统(x64)中占用8个字节，与指针类型无关。

	空指针与野指针：
	1. 空指针 ―― 含义：指针变量指向的内存地址为0 
				   作用：初始化指针变量
				   示例：int* p = NULL;
				   注意：地址0-255为系统占用内存，是不可以读写的
	2. 野指针 ―― 含义：指针变量指向非法的内存地址(野的意思就是“越界”)。

    const修饰指针的三种情况**：
	1.const修饰指针 --- 常量指针。   
	    示例：const int* p = &a;
	    特点：指针的指向可以改，但是原指针指向的地址内的值不可以改。
				  int a = 10;
				  int b = 10;
				  const int* p = &a;
				  *p = 20; (×)
				  p = &b;  (√)
	2.const修饰常量 --- 指针常量。
	    示例：int* const p = &a;
	    特点：指针的指向不可以改，但是原指针指向的地址内的值可以改。
				  int a = 10;
				  int b = 10;
				  int* const p = &a;
				  *p = 20; (√)
				  p = &b;  (×)
	3.const既修饰指针，又修饰常量。
		示例：const int* const p = &a;
		特点：指针的指向与原指针指向的地址内的值都不可以改。
				  int a = 10;
				  int b = 10;
				  const int* const p = &a;
				  *p = 20; (×)
				  p = &b;  (×)
	
	学习记录：
	1. 如何区分常量指针与指针常量：const的中文意思是‘常量’，‘*’代表指针，因此const在前*在后
	就是“常量指针”；*在前const在后就是“指针常量”。
	2. 如何记忆常量指针与指针常量的特点：看const修饰的是什么，如果const修饰的是*，那么取*(改内存值)
	的操作就不能实现；如果const修饰的是对象，那么对象 = 的操作就不能实现。						   	
*/
#include <iostream>
using namespace std;
int main()
{
	int a = 10;
	int* p = &a;
	cout << "sizeof(int*) = " << sizeof(int*) << endl;
	
	system("pause");
	return 0;
}